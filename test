#!/usr/bin/env python

import sys
import warnings
import unittest
import argparse
from contextlib import contextmanager

from tests import conf

TESTS_DIR = "tests"


def parse_args():
    parser = argparse.ArgumentParser(
        description="runs specified tests, "
                    "or run all discovered tests if no are tests specified")

    parser.add_argument("tests", metavar="test", nargs='*',
                        help="test case to run")

    parser.add_argument("--coverage", action="store_true", default=False)

    return parser.parse_args()


def get_testsuite(tests):
    test_loader = unittest.TestLoader()
    if len(tests) == 0:
        # no test names specified, run all discovered tests
        return test_loader.discover(TESTS_DIR)

    test_names = ["%s.%s" % (TESTS_DIR, name) for name in tests]
    return test_loader.loadTestsFromNames(test_names)


@contextmanager
def coverage(enabled):
    conf.WITH_COVERAGE = enabled

    if enabled:
        # only import coverage if we actually using
        from coverage import Coverage
        cov = Coverage(config_file=True, auto_data=True, data_suffix=True)
        cov.start()

        yield None

        cov.stop()
        cov.save()
    else:
        yield None


#
# raise exceptions on runtime warnings
#
# note that some warnings, e.g. ResourceWarning, are only
# generated when the python process is exiting, and thus
# will not be caught. this means that test will pass
# even when we are getting some warnings.
#
# for now we'll rely on watching manually the generated test log
# to spot some of the warnings
#
warnings.simplefilter("error")

# ignore deprecation warnings originating in distutils code,
# we can't really do anything about these warnings
warnings.filterwarnings("ignore",
                        category=DeprecationWarning,
                        module="distutils")

# ignore python 3.5 specific warnings, from third-party code
# these filters can be removed if we drop python 3.5 support
warnings.filterwarnings("ignore",
                        category=PendingDeprecationWarning,
                        module="distutils")

# ignore python 3.4 specific warnings, from third-party code
# these filters can be removed if we drop python 3.4 support
warnings.filterwarnings("ignore",
                        category=PendingDeprecationWarning,
                        module="imp")
warnings.filterwarnings("ignore",
                        category=DeprecationWarning,
                        module="setuptools.py33compat")

args = parse_args()
test_suites = get_testsuite(args.tests)

with coverage(args.coverage):
    res = unittest.TextTestRunner(verbosity=2).run(test_suites)
    if not res.wasSuccessful():
        sys.exit(1)
